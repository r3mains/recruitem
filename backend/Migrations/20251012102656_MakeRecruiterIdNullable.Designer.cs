// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251012102656_MakeRecruiterIdNullable")]
    partial class MakeRecruiterIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line_2");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<string>("Locality")
                        .HasColumnType("text")
                        .HasColumnName("locality");

                    b.Property<string>("Pincode")
                        .HasColumnType("text")
                        .HasColumnName("pincode");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resume_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("candidates", (string)null);
                });

            modelBuilder.Entity("Backend.Models.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<int>("YearOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_experience");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SkillId");

                    b.ToTable("candidate_skills", (string)null);
                });

            modelBuilder.Entity("Backend.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid")
                        .HasColumnName("state_id");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_address");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("OfferLetterUrl")
                        .HasColumnType("text")
                        .HasColumnName("offer_letter_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BranchAddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClosedReason")
                        .HasColumnType("text")
                        .HasColumnName("closed_reason");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("JobTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_type_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid")
                        .HasColumnName("recruiter_id");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("numeric")
                        .HasColumnName("salary_max");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("numeric")
                        .HasColumnName("salary_min");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("StatusId");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_at");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text")
                        .HasColumnName("cover_letter");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewed_by");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("job_applications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("job_skills", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("job_types", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClosedReason")
                        .HasColumnType("text")
                        .HasColumnName("closed_reason");

                    b.Property<int>("NumberOfInterviews")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_interviews");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewer_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StatusId");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("Backend.Models.PositionSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("SkillId");

                    b.ToTable("position_skills", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skill");

                    b.HasKey("Id");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Backend.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("Backend.Models.StatusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("status_types", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.HasOne("Backend.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Models.Candidate", b =>
                {
                    b.HasOne("Backend.Models.Address", "Address")
                        .WithMany("Candidates")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("Backend.Models.Candidate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.CandidateSkill", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Backend.Models.City", b =>
                {
                    b.HasOne("Backend.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.HasOne("Backend.Models.Address", "BranchAddress")
                        .WithMany("Employees")
                        .HasForeignKey("BranchAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Backend.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Job", b =>
                {
                    b.HasOne("Backend.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Address", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Position", "Position")
                        .WithMany("Jobs")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Employee", "Recruiter")
                        .WithMany("RecruitedJobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.StatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobType");

                    b.Navigation("Location");

                    b.Navigation("Position");

                    b.Navigation("Recruiter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Backend.Models.JobApplication", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "Candidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Backend.Models.JobSkill", b =>
                {
                    b.HasOne("Backend.Models.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Skill", "Skill")
                        .WithMany("JobSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Backend.Models.Position", b =>
                {
                    b.HasOne("Backend.Models.Employee", "Reviewer")
                        .WithMany("ReviewedPositions")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.StatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Backend.Models.PositionSkill", b =>
                {
                    b.HasOne("Backend.Models.Position", "Position")
                        .WithMany("PositionSkills")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Skill", "Skill")
                        .WithMany("PositionSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Backend.Models.State", b =>
                {
                    b.HasOne("Backend.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Employees");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Backend.Models.Candidate", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("Backend.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Backend.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.Navigation("RecruitedJobs");

                    b.Navigation("ReviewedPositions");
                });

            modelBuilder.Entity("Backend.Models.Job", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Backend.Models.Position", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("PositionSkills");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("JobSkills");

                    b.Navigation("PositionSkills");
                });

            modelBuilder.Entity("Backend.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
